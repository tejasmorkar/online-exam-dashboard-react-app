{"version":3,"sources":["Components/Navigation.js","Components/Footer.js","Components/SidePanel.js","Components/DashboardTitle.js","Components/Card.js","Components/ExamCards.js","Components/Analytics.js","Components/DashboardContent.js","Components/Dashboard.js","Components/App.js","Components/Spinner.js","serviceWorker.js","index.js"],"names":["Navigation","react_default","a","createElement","className","Component","Footer","SidePanel","src_Components_Navigation","src_Components_Footer","DashboardTitle","Card","ExamCards","src_Components_Card","Analytics","DashboardContent","src_Components_ExamCards","src_Components_Analytics","Dashboard","src_Components_DashboardTitle","src_Components_DashboardContent","App","src_Components_SidePanel","src_Components_Dashboard","Spinner","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","src_Components_App","document","getElementById","src_Components_Spinner","URL","process","href","origin","addEventListener","concat","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.bf357e43.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport './Navigation.css';\r\n\r\nclass Navigation extends Component {\r\n  render () {\r\n    return (\r\n      <div className=\"nav\">\r\n        Navigation\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Navigation;\r\n","import React, { Component } from 'react';\r\nimport './Footer.css';\r\n\r\nclass Footer extends Component {\r\n  render () {\r\n    return (\r\n      <div className=\"footer\">\r\n        Footer\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Footer;\r\n","import React, { Component } from 'react';\r\nimport './SidePanel.css';\r\nimport Nav from './Navigation';\r\nimport Footer from './Footer';\r\n\r\nclass SidePanel extends Component {\r\n  render () {\r\n    return (\r\n      <div className=\"side-panel\">\r\n        <Nav />\r\n        <Footer />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default SidePanel;\r\n","import React, { Component } from 'react';\r\nimport './DashboardTitle.css';\r\n\r\nclass DashboardTitle extends Component {\r\n  render () {\r\n    return (\r\n        <nav className=\"dashboard-title\">\r\n          <div className=\"nav-wrapper\">\r\n            <span className=\"brand-logo center\">DASHBOARD</span>\r\n          </div>\r\n        </nav>\r\n    );\r\n  }\r\n}\r\n\r\nexport default DashboardTitle;\r\n","import React, { Component } from 'react';\r\nimport './Card.css';\r\n\r\nclass Card extends Component {\r\n  render () {\r\n    return (\r\n      <div className=\"card exam-card\">\r\n        <div className=\"card-title\">Data Structures</div>\r\n        <p>\r\n            Learn Data Structures by giving this test and checking your scores.\r\n        </p>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Card;\r\n","import React, { Component } from 'react';\r\nimport './ExamCards.css';\r\nimport Card from './Card';\r\n\r\nclass ExamCards extends Component {\r\n  render () {\r\n    return (\r\n      <div className=\"exam-cards\">\r\n        <Card />\r\n        <Card />\r\n        <Card />\r\n        <Card />\r\n        <Card />\r\n        <Card />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ExamCards;\r\n","import React, { Component } from 'react';\r\nimport './Analytics.css';\r\n\r\nclass Analytics extends Component {\r\n  render () {\r\n    return (\r\n      <div className=\"analytics\">\r\n        Analytics\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Analytics;\r\n","import React, { Component } from 'react';\r\nimport './DashboardContent.css';\r\nimport ExamCards from './ExamCards';\r\nimport Analytics from './Analytics';\r\n\r\nclass DashboardContent extends Component {\r\n  render () {\r\n    return (\r\n      <div className=\"dashboard-content\">\r\n        <ExamCards />\r\n\r\n        <Analytics />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default DashboardContent;\r\n","import React, { Component } from 'react';\r\nimport './Dashboard.css';\r\nimport DashboardTitle from './DashboardTitle';\r\nimport DashboardContent from './DashboardContent';\r\n\r\nclass Dashboard extends Component {\r\n  render () {\r\n    return (\r\n      <div className=\"dashboard\">\r\n        <DashboardTitle />\r\n        <DashboardContent />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Dashboard;\r\n","import React, { Component } from 'react';\r\nimport './App.css';\r\nimport SidePanel from './SidePanel';\r\nimport Dashboard from './Dashboard';\r\n\r\nclass App extends Component {\r\n  componentDidMount() {\r\n\r\n  }\r\n\r\n  render () {\r\n    return (\r\n      <div className=\"app\">\r\n        <SidePanel />\r\n\r\n        <Dashboard />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","import React, { Component } from 'react';\r\nimport './Spinner.css';\r\n\r\nclass Spinner extends Component {\r\n  render () {\r\n    return (\r\n      <div className=\"spinner\">\r\n        <div className=\"loader\">Loading your Dashboard...</div>\r\n        <span className=\"loading-text\">Loading your Dashboard...</span>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Spinner;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './Components/App';\nimport Spinner from './Components/Spinner';\nimport * as serviceWorker from './serviceWorker';\n\nif (!Spinner) {\n    ReactDOM.render(<Spinner />, document.getElementById('root'));\n} else {\n    ReactDOM.render(<App />, document.getElementById('root'));\n}\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}